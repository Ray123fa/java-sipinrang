/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this
 * license Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package View;

import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import javax.swing.Icon;
import jiconfont.swing.IconFontSwing;
import jiconfont.icons.font_awesome.FontAwesome;

/**
 *
 * @author Muhammad Rayhan Faridh
 */
public class MenuItem extends javax.swing.JPanel {

    private final ArrayList<MenuItem> subMenu = new ArrayList<>();
    private ActionListener act;

    /**
     * Creates new form MenuItem
     *
     * @param icon
     * @param bool
     * @param iconSub
     * @param menuName
     * @param act
     * @param subMenu
     */
    public MenuItem(Icon icon, boolean bool, Icon iconSub, String menuName, ActionListener act,
            MenuItem... subMenu) {
        initComponents();
        IconFontSwing.register(FontAwesome.getIconFont());

        setSize(new Dimension(Integer.MAX_VALUE, 45));
        setMaximumSize(new Dimension(Integer.MAX_VALUE, 45));
        setMinimumSize(new Dimension(Integer.MAX_VALUE, 45));
        setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));

        iconMenu.setIcon(icon);
        menuLabel.setText(menuName);
        iconSubMenu.setIcon(iconSub);
        iconSubMenu.setVisible(bool);

        if (act != null) {
            this.act = act;
        }
        for (MenuItem sub : subMenu) {
            this.subMenu.add(sub);
            sub.setVisible(false);
        }

        Color defaultColor = this.getBackground();
        Color hoverColor = new Color(255, 245, 136);
        this.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                setBackground(hoverColor);
            }

            @Override
            public void mouseExited(MouseEvent e) {
                setBackground(defaultColor);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        iconMenu = new javax.swing.JLabel();
        iconSubMenu = new javax.swing.JLabel();
        menuLabel = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 249, 205));
        setPreferredSize(new java.awt.Dimension(200, 37));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });

        iconMenu.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        iconSubMenu.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        menuLabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        menuLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(iconMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(iconSubMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(menuLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(menuLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
            .addComponent(iconMenu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(iconSubMenu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private boolean showing = false;

    private void formMousePressed(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_formMousePressed
        if (showing) {
            hideMenu();
        } else {
            showMenu();
        }
        if (act != null) {
            act.actionPerformed(null);
        }
    }// GEN-LAST:event_formMousePressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel iconMenu;
    private javax.swing.JLabel iconSubMenu;
    private javax.swing.JLabel menuLabel;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the subMenu
     */
    public ArrayList<MenuItem> getSubMenu() {
        return subMenu;
    }

    private void hideMenu() {
        new Thread(new Runnable() {
            @Override
            public void run() {
                for (int i = subMenu.size() - 1; i >= 0; i--) {
                    sleep();
                    subMenu.get(i).setVisible(false);
                    subMenu.get(i).hideMenu();
                }
                getParent().repaint();
                getParent().revalidate();
                showing = false;
            }
        }).start();
    }

    private void showMenu() {
        new Thread(new Runnable() {
            @Override
            public void run() {
                for (int i = 0; i < subMenu.size(); i++) {
                    sleep();
                    subMenu.get(i).setVisible(true);
                }
                showing = true;
                getParent().repaint();
                getParent().revalidate();
            }
        }).start();
    }

    private void sleep() {
        try {
            Thread.sleep(10);
        } catch (Exception ex) {
        }
    }
}
