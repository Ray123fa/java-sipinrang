/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package View;

import Controller.UserController;
import Model.UserModel;
import java.awt.Font;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Muhammad Rayhan Faridh
 */
public class TableMemberPanel extends javax.swing.JPanel {

    private final UserModel user;
    private String divisi;
    private String role;
    private String activePanel;

    /**
     * Creates new form MemberPanel
     *
     * @param user
     */
    public TableMemberPanel(UserModel user, String activePanel) {
        initComponents();
        this.user = user;
        this.role = user.getRole();
        this.divisi = user.getDivisi().toLowerCase();
        this.activePanel = activePanel;

        execute();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        dataMembersPanel = new javax.swing.JPanel();
        titlePanel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        btnEdit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnEkspor = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        membersTable = new javax.swing.JTable();

        setBackground(new java.awt.Color(255, 252, 230));
        setLayout(new java.awt.CardLayout());

        mainPanel.setBackground(new java.awt.Color(255, 252, 230));
        mainPanel.setLayout(new java.awt.CardLayout());

        dataMembersPanel.setBackground(new java.awt.Color(255, 252, 230));

        titlePanel.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        titlePanel.setText("TITLE");

        btnEdit.setBackground(new java.awt.Color(108, 117, 125));
        btnEdit.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnEdit.setForeground(new java.awt.Color(255, 255, 255));
        btnEdit.setText("EDIT");
        btnEdit.setBorder(null);
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(220, 53, 69));
        btnDelete.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(255, 255, 255));
        btnDelete.setText("HAPUS");
        btnDelete.setBorder(null);
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnEkspor.setBackground(new java.awt.Color(0, 123, 255));
        btnEkspor.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnEkspor.setForeground(new java.awt.Color(255, 255, 255));
        btnEkspor.setText("EKSPOR");
        btnEkspor.setBorder(null);
        btnEkspor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEksporActionPerformed(evt);
            }
        });

        membersTable.setBackground(new java.awt.Color(245, 245, 220));
        membersTable.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        membersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "NIM", "Nama Lengkap", "Tanggal Lahir", "Angkatan", "Divisi", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        membersTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(membersTable);

        javax.swing.GroupLayout dataMembersPanelLayout = new javax.swing.GroupLayout(dataMembersPanel);
        dataMembersPanel.setLayout(dataMembersPanelLayout);
        dataMembersPanelLayout.setHorizontalGroup(
            dataMembersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dataMembersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dataMembersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dataMembersPanelLayout.createSequentialGroup()
                        .addGroup(dataMembersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 736, Short.MAX_VALUE)
                            .addComponent(jSeparator1)
                            .addComponent(titlePanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(12, 12, 12))
                    .addGroup(dataMembersPanelLayout.createSequentialGroup()
                        .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEkspor, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        dataMembersPanelLayout.setVerticalGroup(
            dataMembersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dataMembersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titlePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(dataMembersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEkspor, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 463, Short.MAX_VALUE)
                .addGap(13, 13, 13))
        );

        mainPanel.add(dataMembersPanel, "card2");

        add(mainPanel, "card2");
    }// </editor-fold>//GEN-END:initComponents

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        editSelectedRow();
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        deleteSelectedRows();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnEksporActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEksporActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        int option = fileChooser.showSaveDialog(mainPanel);
        if (option == JFileChooser.APPROVE_OPTION) {
            String path = fileChooser.getSelectedFile().getAbsolutePath() + ".csv";
            new UserController().exportToCsv(path);
            JOptionPane.showMessageDialog(null, "Data berhasil diekspor!");
        }
    }//GEN-LAST:event_btnEksporActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnEkspor;
    private javax.swing.JPanel dataMembersPanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JTable membersTable;
    private javax.swing.JLabel titlePanel;
    // End of variables declaration//GEN-END:variables

    private void hideButtonCrud() {
        btnDelete.setVisible(false);
        btnEdit.setVisible(false);
    }

    private void setTitlePanel() {
        titlePanel.setText("ANGGOTA " + activePanel.toUpperCase());
    }

    private void loadTableData(String activePanel) {
        DefaultTableModel dtm = (DefaultTableModel) membersTable.getModel();
        dtm.setRowCount(0);
        membersTable.setRowHeight(30);
        membersTable.getTableHeader().setFont(new Font("Segoe UI", Font.BOLD, 14));

        setAlignTableCell("center", 0, 2, 3, 4, 5);

        for (UserModel user : user.getUsers(activePanel)) {
            dtm.addRow(new Object[]{
                user.getNim(),
                user.getFullname(),
                user.getBirthday(),
                user.getAngkatan(),
                user.getDivisi(),
                user.getStatus()
            });
        }
    }

    private void setAlignTableCell(String align, Integer... col) {
        DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();

        switch (align.toLowerCase()) {
            case "center":
                renderer.setHorizontalAlignment(SwingConstants.CENTER);
                break;
            case "right":
                renderer.setHorizontalAlignment(SwingConstants.RIGHT);
                break;
            case "left":
            default:
                renderer.setHorizontalAlignment(SwingConstants.LEFT);
                break;
        }

        for (Integer columnIndex : col) {
            membersTable.getColumnModel().getColumn(columnIndex).setCellRenderer(renderer);
        }
    }

    private void editSelectedRow() {
        int selectedRow = membersTable.getSelectedRow();
        int countSelectedRow = membersTable.getSelectedRowCount();
        DefaultTableModel dtm = (DefaultTableModel) membersTable.getModel();

        if (selectedRow != -1 && countSelectedRow == 1) {
            String nim = dtm.getValueAt(selectedRow, 0).toString();
            UserModel selectedUser = user.getUser(nim);

            mainPanel.removeAll();
            mainPanel.add(new EditMemberPanel(selectedUser, user));
            mainPanel.repaint();
            mainPanel.revalidate();
        } else {
            JOptionPane.showMessageDialog(null, "Anda harus memilih maksimal satu baris untuk mengedit!");
        }
    }

    private void deleteSelectedRows() {
        int[] selectedRows = membersTable.getSelectedRows();
        DefaultTableModel dtm = (DefaultTableModel) membersTable.getModel();

        if (selectedRows.length > 0) {
            int dialogResult = JOptionPane.showConfirmDialog(null, "Apakah Anda yakin ingin menghapus data ini?", "Peringatan", JOptionPane.YES_NO_OPTION);
            if (dialogResult == JOptionPane.YES_OPTION) {
                for (int i = selectedRows.length - 1; i >= 0; i--) {
                    String nim = dtm.getValueAt(selectedRows[i], 0).toString();
                    boolean isSuccess = user.deleteMember(nim);
                    if (isSuccess) {
                        dtm.removeRow(selectedRows[i]);
                    } else {
                        JOptionPane.showMessageDialog(null, "Gagal menghapus data!");
                    }
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Anda belum memilih baris.\nPilih satu atau lebih baris untuk menghapus!");
        }
    }

    private void execute() {
        this.loadTableData(activePanel);

        if ((role.equals("koor") && !divisi.equals(activePanel)) || role.equals("member")) {
            this.hideButtonCrud();
        }
        if (!activePanel.equals("keseluruhan")) {
            btnEkspor.setVisible(false);
        }

        this.setTitlePanel();
    }
}
